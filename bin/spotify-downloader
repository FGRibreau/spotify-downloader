#!/usr/bin/env node
/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

var key            = 'Put your filestube\'s API key here -> http://www.filestube.com/api.html';

// ----------------------------------------------------------------
var async          = require('async');
var parser         = require('xml2json');
var request        = require('request');
var _              = require('underscore');
var defer          = require('promise').defer;


var filestubeRegex = /renderGo\(\'(.*)\'\)/gi;
var tracks         = []; // (step 1) Spotify track Ids
var tracksName     = []; // (step 2) track names
var filesTubeUrl   = []; // (step 3) filestube download page urls
var urls           = []; // (step 4) Direct download urls

function onlyKeepRealUrl(track){
  return track.indexOf('/local/') == -1;
}

function extractTrackID(track){
  return track.replace('http://open.spotify.com/track/','');
}

function trackIdToRealName(trackId, callback){

  request('http://ws.spotify.com/lookup/1/?uri=spotify:track:' + trackId, function (error, response, body) {
    if(error){return callback(error);}
    if(response.statusCode != 200){return callback(new Error('HTTP CODE '+ response.statusCode + ' for ' + trackId ));}

    var json = parser.toJson(body, {object: true});

    if(!json.track || !json.track.name){return callback(new Error('Wrong xml for ' + trackId));}

    var artist = (_.isArray(json.track.artist) ? json.track.artist : json.track.artist ? [json.track.artist] : []).map(function(o){
      return o.name;
    }).join(' ');

    tracksName.push(json.track.name + ' ' + artist);
    callback();
  });

}

function findDDLUrl(trackName, callback){

  request('http://api.filestube.com/?key='+key+'&popularity=1&extension=mp3&phrase=' + escape(trackName), function (error, response, body) {
    if(error){console.error(error);return callback();}
    if(response.statusCode != 200){console.error(new Error('HTTP CODE '+ response.statusCode + ' for ' + trackId )); return callback();}

    var json = parser.toJson(body, {object: true});

    if(!json || !json.answer || !json.answer.results || !json.answer.results.hits || json.answer.results.hits.length === 0){console.error(new Error('No filestube results for ' + trackName));return callback();}

    try{
      filesTubeUrl.push(json.answer.results.hits[0].details);
    } catch(err){
      console.error(err);
      console.log(JSON.stringify(json));
    }

    callback();
  });
}

function extractDDLUrlFromPage(htmlString){
  var res = filestubeRegex.exec(htmlString);

  return res && (res.length > 0 && res[1]) ? res[1] : null;
}

function extractFilesTubeUrl(filesTubeUrl, callback){

  request(filesTubeUrl, function(error, response, body){
    if(error){console.error(error);return callback();}
    if(response.statusCode != 200){console.error(new Error('HTTP CODE '+ response.statusCode + ' for ' + trackId ));return callback();}

    var url = extractDDLUrlFromPage(body);

    if(url != null){
      urls.push(url);
    }

    callback();
  });
}

process.stdin.resume();
process.stdin.setEncoding('utf8');

process.stdin.on('data', function (chunk) {
  tracks = ((chunk || '').split('\n') || [])
    .filter(onlyKeepRealUrl)
    .map(extractTrackID);

  async.forEachLimit(tracks, 5, trackIdToRealName, function then(err){
    if(err){console.error(err);}

    console.log('\nExtracted names from Spotify');
    console.log(tracksName);

    async.forEachLimit(tracksName, 5, findDDLUrl, function then(err){
      if(err){console.error(err);}

      console.log('\nExtracted FilesTube URLs');
      console.log(filesTubeUrl);

      async.forEachLimit(filesTubeUrl, 5, extractFilesTubeUrl, function then(err){
        if(err){console.error(err);}

        console.log('\nDirect Download Urls');
        console.log(urls);
      });

    });

  });

});
